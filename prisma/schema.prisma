generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Sex {
  male
  female
}

model PetImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  url       String
  petId     String?
  pet       Pet?     @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId])
}

model Pet {
  id          String     @id @default(cuid())
  adopted     Boolean    @default(false)
  birthYear   String
  description String     @db.Text
  title       String     @db.Text
  sex         Sex
  userId      String
  animalId    String
  breedId     String
  images      PetImage[]
  country     String
  region      String
  city        String     
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  animal      Animal     @relation(fields: [animalId], references: [id])
  breed       Breed      @relation(fields: [breedId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([animalId])
  @@index([breedId])
  @@index([userId])
  @@map("pets")
}

model Breed {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique
  animal    Animal   @relation(fields: [animalId], references: [id])
  animalId  String
  pets      Pet[]

  @@index([animalId])
  @@map("breeds")
}

model Animal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique
  breeds    Breed[]
  pets      Pet[]

  @@map("animals")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified Boolean?
  image         String?
  phone         String?
  contactInfo   String?
  pets          Pet[]
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
